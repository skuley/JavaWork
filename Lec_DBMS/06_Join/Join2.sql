-- 비등가 JOIN (Non-Equi Join)

-- 20 레코드
SELECT * FROM T_CUSTOMER ;

-- 10 레코드
SELECT * FROM T_GIFT ;


-- #6201
SELECT c.C_NAME 고객명, c.C_POINT point, g.G_NAME 삼풍명
FROM T_CUSTOMER c, T_GIFT g
WHERE c.C_POINT BETWEEN g.G_START AND g.G_END ;

-- ANSI 방식
SELECT c.C_NAME 고객명, c.C_POINT point, g.G_NAME 삼풍명
FROM T_CUSTOMER c JOIN T_GIFT g ON c.C_POINT BETWEEN g.G_START AND g.G_END ;

-- #6202
SELECT g.G_NAME 삼풍명, COUNT(* ) 
FROM T_CUSTOMER c, T_GIFT g
WHERE c.C_POINT BETWEEN g.G_START AND g.G_END 
GROUP BY  g.G_NAME ;

-- #6203
SELECT * FROM T_EXAM01 ;
SELECT * FROM T_CREDIT ;

SELECT s.NAME 학생이름, e.TOTAL 점수, c.GRADE 학점
FROM T_STUDENT s, T_EXAM01 e, T_CREDIT c
WHERE s.STUDNO = e.STUDNO AND e.TOTAL BETWEEN c.MIN_POINT AND c.MAX_POINT 

SELECT s.NAME 학생이름, e.TOTAL 점수, c.GRADE 학점
FROM 
	T_STUDENT s 
	JOIN T_EXAM01 e ON s.STUDNO = e.STUDNO
	JOIN T_CREDIT c ON e.TOTAL BETWEEN c.MIN_POINT AND c.MAX_POINT 
;

-- #6204
-- 20 레코드
SELECT * FROM T_CUSTOMER ;

-- 10 레코드
SELECT * FROM T_GIFT ;

SELECT c.C_NAME 고객명, c.C_POINT 포인트, g.G_NAME 삼풍명
FROM T_CUSTOMER c , T_GIFT g
WHERE c.C_POINT >= g.G_START 
		AND g.G_NO = 5;
		
-- ANSI 방식
SELECT c.C_NAME 고객명, c.C_POINT 포인트, g.G_NAME 삼풍명
FROM T_CUSTOMER c JOIN T_GIFT g ON c.C_POINT >= g.G_START AND g.G_NO = 5;

-- #6205

SELECT * FROM T_EMP2 ;
SELECT * FROM T_POST ;

SELECT 
e.NAME 이름, 
(TO_CHAR(SYSDATE , 'YYYY') - TO_CHAR(e.BIRTHDAY , 'YYYY') + 1) 현재나이,
NVL(e.POST , ' ') "현재직급" ,
p.POST "예상직급"
FROM T_EMP2 e, T_POST p
WHERE (TO_CHAR(SYSDATE , 'YYYY') - TO_CHAR(e.BIRTHDAY , 'YYYY') + 1) 
BETWEEN p.S_AGE AND p.E_AGE ;

-- ANSI
SELECT 
e.NAME 이름, 
(TO_CHAR(SYSDATE , 'YYYY') - TO_CHAR(e.BIRTHDAY , 'YYYY') + 1) 현재나이,
NVL(e.POST , ' ') "현재직급" ,
p.POST "예상직급"
FROM T_EMP2 e JOIN T_POST p
ON (TO_CHAR(SYSDATE , 'YYYY') - TO_CHAR(e.BIRTHDAY , 'YYYY') + 1) 
BETWEEN p.S_AGE AND p.E_AGE ;

-- ###########################################################

-- OUTER JOIN

-- #6206
SELECT s.NAME "학생이름", p.NAME "교수이름"
FROM T_STUDENT s LEFT OUTER JOIN T_PROFESSOR p
	ON s.PROFNO  = p.PROFNO ;

-- #6207
SELECT s.NAME "학생이름", p.NAME "교수이름"
FROM T_STUDENT s RIGHT OUTER JOIN T_PROFESSOR p
	ON s.PROFNO  = p.PROFNO ;

-- #6208
SELECT s.NAME "학생이름", p.NAME "교수이름"
FROM T_STUDENT s FULL OUTER JOIN T_PROFESSOR p
	ON s.PROFNO  = p.PROFNO ;

-- #6209
SELECT * FROM T_DEPT2 ;

SELECT d1.DNAME 부서명, d2.DNAME 상위부서명
FROM T_DEPT2 d1, T_DEPT2 d2
WHERE d1.PDEPT = d2.DCODE ;

SELECT d1.DNAME 부서명, d2.DNAME 상위부서명
FROM T_DEPT2 d1 JOIN T_DEPT2 d2
ON d1.PDEPT = d2.DCODE ;

-- #6210
-- 자신보다 빠른 입사일
SELECT 
	a.PROFNO "교수번호", a.NAME "교수명", a.HIREDATE "입사일",
	COUNT( b.HIREDATE) "빠른입사일"
FROM 
	T_PROFESSOR a LEFT OUTER JOIN T_PROFESSOR b
	ON b.HIREDATE < a.HIREDATE -- 자기보다 작은 사람
GROUP BY 
	a.PROFNO , a.NAME , a.HIREDATE 
ORDER BY 4; -- 4번째 컬럼 오른차순 default




